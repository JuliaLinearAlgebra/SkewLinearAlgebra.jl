var documenterSearchIndex = {"docs":
[{"location":"#SkewLinearAlgebra.jl-Documentation","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"To use this package, using the LinearAlgebra standard library is required.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"using LinearAlgebra\nusing SkewLinearAlgebra","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"WARNING: Package still in development!","category":"page"},{"location":"#SkewHermitian-and-SkewHermTridiagonal-types","page":"SkewLinearAlgebra.jl Documentation","title":"SkewHermitian and SkewHermTridiagonal types","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"This package provides specialized algorithms for dense real skew-symmetric matrices i.e A=-A^T and complex skew-hermitian matrices i.e A=-A^*. It provides the matrix types SkewHermitian and SkewHermTridiagonal and implements the usual linear operations on such matrices by extending functions from Julia's LinearAlgebra standard library, including optimized algorithms that exploit this special matrix structure.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"In particular, the package provides the following optimized functions for SkewHermitian and SkewHermTridiagonal matrices:","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Tridiagonal reduction: hessenberg\nEigensolvers: eigen, eigvals\nSVD: svd, svdvals\nTrigonometric functions:exp, cis,cos,sin,tan,sinh,cosh,tanh","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Only for SkewHermitian matrices:","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Cholesky-like factorization: skewchol\nPfaffian of real SkewHermitian: pfaffian, logabspfaffian","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"(Currently, we only provide specialized algorithms for real skew-Hermitian/skew-symmetric matrices. Methods for complex skew-Hermitian matrices transform these at negligible cost in complex Hermitian  matrices by multiplying by i. This allows to use efficient LAPACK algorithms for hermitian matrices. Note, however that for real skew-Hermitian matrices this would force you to use complex arithmetic.   Hence, the benefits of specialized algorithms are greatest for real skew-Hermitian matrices.)","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The SkewHermitian(A) wraps an existing matrix A, which must already be skew-Hermitian, in the SkewHermitian type, which supports fast specialized operations noted above.  You can use the function isskewhermitian(A) to check whether A is skew-Hermitian (A == -A').","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Alternatively, you can use the funcition skewhermitian(A) to take the skew-Hermitian part of A, given by (A - A')/2, and wrap it in a SkewHermitian view.  Alternatively, the function skewhermitian!(A) does the same operation in-place on A.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Here is a basic example to initialize a SkewHermitian","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> A = [0 2 -7 4; -2 0 -8 3; 7 8 0 1;-4 -3 -1 0]\n3×3 Matrix{Int64}:\n  0  2 -7  4\n -2  0 -8  3\n  7  8  0  1\n  -4 -3 -1 0\n\njulia> isskewhermitian(A)\ntrue\n\njulia> A = SkewHermitian(A)\n4×4 SkewHermitian{Int64, Matrix{Int64}}:\n  0   2  -7  4\n -2   0  -8  3\n  7   8   0  1\n -4  -3  -1  0\n\njulia> tr(A)\n0\n\njulia> det(A)\n81.0\n\njulia> inv(A)\n4×4 SkewHermitian{Float64, Matrix{Float64}}:\n  0.0        0.111111  -0.333333  -0.888889\n -0.111111   0.0        0.444444   0.777778\n  0.333333  -0.444444   0.0        0.222222\n  0.888889  -0.777778  -0.222222   0.0\n\njulia> x=[1;2;3;4]\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\njulia> A\\x\n4-element Vector{Float64}:\n -4.333333333333334\n  4.333333333333334\n  0.3333333333333336\n -1.3333333333333333","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The SkewHermTridiagonal(ev,dvim)creates a abstract version of a tridiagonal skew-Hermitian matrix where ev is the subdiagonal and dvim is a Real vector representing the pure imaginary diagonal of the matrix. Real skew-symmetric matrices having zero diagonal elements, the constructor allows to only give the subdiagonal as argument.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"Here is a basic example to initialize a SkewHermTridiagonal","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> A=SkewHermTridiagonal(rand(ComplexF64,4), rand(5))\n5×5 SkewHermTridiagonal{ComplexF64, Vector{ComplexF64}, Vector{Float64}}:\n      0.0+0.150439im  -0.576265+0.23126im          0.0+0.0im             0.0+0.0im             0.0+0.0im\n 0.576265+0.23126im         0.0+0.0833022im  -0.896415+0.6846im          0.0+0.0im             0.0+0.0im\n      0.0+0.0im        0.896415+0.6846im           0.0+0.868229im  -0.593476+0.421484im        0.0+0.0im\n      0.0+0.0im             0.0+0.0im         0.593476+0.421484im        0.0+0.995528im  -0.491818+0.32038im\n      0.0+0.0im             0.0+0.0im              0.0+0.0im        0.491818+0.32038im         0.0+0.241177im\n      \njulia> SkewHermTridiagonal(randn(ComplexF32, 4))\n5×5 SkewHermTridiagonal{ComplexF32, Vector{ComplexF32}, Nothing}:\n       0.0+0.0im        0.343935+0.292369im         0.0+0.0im             0.0+0.0im             0.0+0.0im\n -0.343935+0.292369im        0.0+0.0im       -0.0961587-0.282884im        0.0+0.0im             0.0+0.0im\n       0.0+0.0im       0.0961587-0.282884im         0.0+0.0im       -0.397075+0.518492im        0.0+0.0im\n       0.0+0.0im             0.0+0.0im         0.397075+0.518492im        0.0+0.0im       -0.405492+0.679622im\n       0.0+0.0im             0.0+0.0im              0.0+0.0im        0.405492+0.679622im        0.0+0.0im\n\njulia> SkewHermTridiagonal(randn(4))\n5×5 SkewHermTridiagonal{Float64, Vector{Float64}, Nothing}:\n  0.0      1.93717    0.0        0.0       0.0\n -1.93717  0.0       -0.370536   0.0       0.0\n  0.0      0.370536   0.0       -0.964014  0.0\n  0.0      0.0        0.964014   0.0       1.33282\n  0.0      0.0        0.0       -1.33282   0.0","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The functions from the LinearAlgebra package can be used in the same fashion:","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> hessenberg(A)\nHessenberg{Float64, SkewHermTridiagonal{Float64, Vector{Float64}, Nothing}, Matrix{Float64}, Vector{Float64}, Bool}\nQ factor:\n4×4 LinearAlgebra.HessenbergQ{Float64, Matrix{Float64}, Vector{Float64}, true}:\n 1.0   0.0        0.0         0.0\n 0.0  -0.240772  -0.95927    -0.14775\n 0.0   0.842701  -0.282138    0.458534\n 0.0  -0.481543  -0.0141069   0.876309\nH factor:\n4×4 SkewHermTridiagonal{Float64, Vector{Float64}, Nothing}:\n 0.0      -8.30662   0.0       0.0 \n 8.30662   0.0      -8.53382   0.0 \n 0.0       8.53382   0.0       1.08347\n 0.0       0.0      -1.08347   0.0\n\n julia> eigvals(A)\n4-element Vector{ComplexF64}:\n  0.0 + 11.93445871397423im\n  0.0 + 0.7541188264752853im\n -0.0 - 0.7541188264752877im\n -0.0 - 11.934458713974225im\n","category":"page"},{"location":"#Hessenberg/Tridiagonal-reduction","page":"SkewLinearAlgebra.jl Documentation","title":"Hessenberg/Tridiagonal reduction","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The Hessenberg reduction performs a reduction A=QHQ^T where Q=prod_i I-tau_i v_iv_i^T is an orthonormal matrix. The hessenberg function computes the Hessenberg decomposition of A and returns a Hessenberg object. If F is the factorization object, the unitary matrix can be accessed with F.Q (of type LinearAlgebra.HessenbergQ) and the Hessenberg matrix with F.H (of type SkewHermTridiagonal), either of which may be converted to a regular matrix with Matrix(F.H) or Matrix(F.Q).","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> hessenberg(A)\nHessenberg{Float64, Tridiagonal{Float64, Vector{Float64}}, Matrix{Float64}, Vector{Float64}, Bool}\nQ factor:\n4×4 LinearAlgebra.HessenbergQ{Float64, Matrix{Float64}, Vector{Float64}, true}:\n 1.0   0.0        0.0         0.0\n 0.0  -0.240772  -0.95927    -0.14775\n 0.0   0.842701  -0.282138    0.458534\n 0.0  -0.481543  -0.0141069   0.876309\nH factor:\n4×4 SkewHermTridiagonal{Float64, Vector{Float64}, Nothing}:\n 0.0      -8.30662   0.0       0.0 \n 8.30662   0.0      -8.53382   0.0 \n 0.0       8.53382   0.0       1.08347\n 0.0       0.0      -1.08347   0.0","category":"page"},{"location":"#Eigenvalues-and-eigenvectors","page":"SkewLinearAlgebra.jl Documentation","title":"Eigenvalues and eigenvectors","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The package also provides eigensolvers for  SkewHermitian and SkewHermTridiagonal matrices. The method to solve the eigenvalue problem is based on the algorithm described in Penke et al, \"High Performance Solution of Skew-symmetric Eigenvalue Problems with Applications in Solving Bethe-Salpeter Eigenvalue Problem\" (2020).","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The function eigen returns a Eigenstructure as the LinearAlgebra standard library:","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> E = eigen(A)\nEigen{ComplexF64, ComplexF64, Matrix{ComplexF64}, Vector{ComplexF64}}\nvalues:\n4-element Vector{ComplexF64}:\n  0.0 + 11.934458713974193im\n  0.0 + 0.7541188264752741im\n -0.0 - 0.7541188264752989im\n -0.0 - 11.934458713974236im\nvectors:\n4×4 Matrix{ComplexF64}:\n    -0.49111+0.0im        -0.508735+0.0im           0.508735+0.0im           0.49111+0.0im\n   -0.488014-0.176712im    0.471107+0.0931315im    -0.471107+0.0931315im    0.488014-0.176712im\n   -0.143534+0.615785im    0.138561-0.284619im     -0.138561-0.284619im     0.143534+0.615785im\n -0.00717668-0.299303im  0.00692804-0.640561im   -0.00692804-0.640561im   0.00717668-0.299303im","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The function eigvals provides the eigenvalues of A. The eigenvalues can be sorted and found partially with imaginary part in some given real range or by order.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":" julia> eigvals(A)\n4-element Vector{ComplexF64}:\n  0.0 + 11.93445871397423im\n  0.0 + 0.7541188264752853im\n -0.0 - 0.7541188264752877im\n -0.0 - 11.934458713974225im\n\njulia> eigvals(A,0,15)\n2-element Vector{ComplexF64}:\n 0.0 + 11.93445871397414im\n 0.0 + 0.7541188264752858im\n\njulia> eigvals(A,1:3)\n3-element Vector{ComplexF64}:\n  0.0 + 11.93445871397423im\n  0.0 + 0.7541188264752989im\n -0.0 - 0.7541188264752758im","category":"page"},{"location":"#SVD","page":"SkewLinearAlgebra.jl Documentation","title":"SVD","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"A specialized SVD using the eigenvalue decomposition is implemented for SkewHermitian and SkewHermTridiagonal type.  These functions can be called using the LinearAlgebra syntax.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":" julia> svd(A)\nSVD{ComplexF64, Float64, Matrix{ComplexF64}}\nU factor:\n4×4 Matrix{ComplexF64}:\n    0.49111+0.0im          -0.49111+0.0im          0.508735+0.0im         -0.508735+0.0im\n   0.488014-0.176712im    -0.488014-0.176712im    -0.471107+0.0931315im    0.471107+0.0931315im\n   0.143534+0.615785im    -0.143534+0.615785im    -0.138561-0.284619im     0.138561-0.284619im\n 0.00717668-0.299303im  -0.00717668-0.299303im  -0.00692804-0.640561im   0.00692804-0.640561im\nsingular values:\n4-element Vector{Float64}:\n 11.93445871397423\n 11.934458713974193\n  0.7541188264752989\n  0.7541188264752758\nVt factor:\n4×4 Matrix{ComplexF64}:\n 0.0-0.49111im     0.176712-0.488014im  -0.615785-0.143534im   0.299303-0.00717668im\n 0.0-0.49111im    -0.176712-0.488014im   0.615785-0.143534im  -0.299303-0.00717668im\n 0.0-0.508735im  -0.0931315+0.471107im   0.284619+0.138561im   0.640561+0.00692804im\n 0.0-0.508735im   0.0931315+0.471107im  -0.284619+0.138561im  -0.640561+0.00692804im\n\n julia> svdvals(A)\n4-element Vector{Float64}:\n 11.93445871397423\n 11.934458713974225\n  0.7541188264752877\n  0.7541188264752853","category":"page"},{"location":"#Trigonometric-functions","page":"SkewLinearAlgebra.jl Documentation","title":"Trigonometric functions","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The package implements special versions of the trigonometric functions using the eigenvalue decomposition. The provided functions are exp, cis,cos,sin,tan,sinh,cosh,tanh.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":" julia> exp(A)\n4×4 Matrix{Float64}:\n -0.317791  -0.816528    -0.268647   0.400149\n -0.697298   0.140338     0.677464   0.187414\n  0.578289  -0.00844255   0.40033    0.710807\n  0.279941  -0.559925     0.555524  -0.547275\n\n julia> cis(A)\n4×4 Matrix{ComplexF64}:\n   5.95183+0.0im       3.21734+1.80074im     -0.658082-3.53498im      -1.4454+5.61775im\n   3.21734-1.80074im   4.00451+1.0577e-17im   -1.42187-1.41673im     0.791701+4.77348im\n -0.658082+3.53498im  -1.42187+1.41673im       2.89938+7.7327e-18im  -2.69134-1.61285im\n   -1.4454-5.61775im  0.791701-4.77348im      -2.69134+1.61285im      6.92728+2.40436e-16im\n\njulia> cos(A)\n4×4 Matrix{Float64}:\n  5.95183    3.21734   -0.658082  -1.4454\n  3.21734    4.00451   -1.42187    0.791701\n -0.658082  -1.42187    2.89938   -2.69134\n -1.4454     0.791701  -2.69134    6.92728\n\njulia> cosh(A)\n4×4 Matrix{Float64}:\n -0.317791  -0.756913  0.154821   0.340045\n -0.756913   0.140338  0.334511  -0.186256\n  0.154821   0.334511  0.40033    0.633165\n  0.340045  -0.186256  0.633165  -0.547275","category":"page"},{"location":"#Cholesky-like-factorization","page":"SkewLinearAlgebra.jl Documentation","title":"Cholesky-like factorization","text":"","category":"section"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"The package provides a Cholesky-like factorization for real skew-symmetric matrices as presented in P. Benner et al, \"Cholesky-like factorizations of skew-symmetric matrices\"(2000).  Every real skew-symmetric matrix A can be factorized as A=P^TR^TJRP where P is a permutation matrix, R is an UpperTriangular matrix and J is is tridiagonal skew-symmetric matrix composed of diagonal blocks of the form B=0 1 -1 0. The function skewcholimplements this factorization and returns a SkewCholesky structure composed of the matrices Rm and Jm of type UpperTriangular and SkewHermTridiagonal respectively. The permutation matrix P is encoded as a permutation vector Pv.","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"julia> R=skewchol(A)\nSkewCholesky{Float64, LinearAlgebra.UpperTriangular{var\"#s6\", S} where {var\"#s6\"<:Float64, S<:AbstractMatrix{var\"#s6\"}}, SkewHermTridiagonal{var\"#s3\", V, Vim} where {var\"#s3\"<:Float64, V<:AbstractVector{var\"#s3\"}, Vim<:Union{Nothing, AbstractVector{var\"#s6\"} where var\"#s6\"<:Real}}, AbstractVector{var\"#s2\"} where var\"#s2\"<:Integer}([2.8284271247461903 0.0 0.7071067811865475 -1.0606601717798212; 0.0 2.8284271247461903 2.474873734152916 0.35355339059327373; 0.0 0.0 1.0606601717798216 0.0; 0.0 0.0 0.0 1.0606601717798216], [0.0 1.0 0.0 0.0; -1.0 0.0 -0.0 0.0; 0.0 0.0 0.0 1.0; 0.0 0.0 -1.0 0.0], [3, 2, 1, 4])\n\njulia> R.Rm\n4×4 LinearAlgebra.UpperTriangular{Float64, Matrix{Float64}}:\n 2.82843  0.0      0.707107  -1.06066\n  ⋅       2.82843  2.47487    0.353553\n  ⋅        ⋅       1.06066    0.0\n  ⋅        ⋅        ⋅         1.06066\n\njulia> R.Jm\n4×4 SkewHermTridiagonal{Float64, Vector{Float64}, Nothing}:\n  0.0  1.0   0.0  0.0\n -1.0  0.0  -0.0  0.0\n  0.0  0.0   0.0  1.0\n  0.0  0.0  -1.0  0.0\n\njulia> R.Pv\n4-element Vector{Int64}:\n 3\n 2\n 1\n 4\n \n julia> transpose(R.Rm)*R.Jm*R.Rm≈A[R.Pv,R.Pv]\ntrue","category":"page"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"skewhermitian\nskewhermitian!\nisskewhermitian\nSkewHermitian\nSkewHermTridiagonal\nskewchol\npfaffian\nlogabspfaffian","category":"page"},{"location":"#SkewLinearAlgebra.skewhermitian","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.skewhermitian","text":"skewhermitian(A)\n\nReturns the skew-Hermitian part of A, i.e. (A-A')/2.  See also skewhermitian!, which does this in-place.\n\n\n\n\n\n","category":"function"},{"location":"#SkewLinearAlgebra.skewhermitian!","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.skewhermitian!","text":"skewhermitian!(A)\n\nTransforms A in-place to its skew-Hermitian part (A-A')/2, and returns a SkewHermitian view.\n\n\n\n\n\n","category":"function"},{"location":"#SkewLinearAlgebra.isskewhermitian","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.isskewhermitian","text":"isskewhermitian(A)\n\nReturns whether A is skew-Hermitian, i.e. whether A == -A'.\n\n\n\n\n\n","category":"function"},{"location":"#SkewLinearAlgebra.SkewHermitian","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.SkewHermitian","text":"SkewHermitian(A) <: AbstractMatrix\n\nConstruct a SkewHermitian view of the skew-Hermitian matrix A (A == -A'), which allows one to exploit efficient operations for eigenvalues, exponentiation, and more.\n\nTakes \"ownership\" of the matrix A.  See also skewhermitian, which takes the skew-hermitian part of A, and skewhermitian!, which does this in-place, along with isskewhermitian which checks whether A == -A'.\n\n\n\n\n\n","category":"type"},{"location":"#SkewLinearAlgebra.SkewHermTridiagonal","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.SkewHermTridiagonal","text":"SkewHermTridiagonal(ev::V, dvim::Vim) where {V <: AbstractVector, Vim <: AbstractVector{<:Real}}\n\nConstruct a skewhermitian tridiagonal matrix from the subdiagonal (ev)  and the imaginary part of the main diagonal (dvim). The result is of type SkewHermTridiagonal and provides efficient specialized eigensolvers, but may be converted into a regular matrix with convert(Array, _) (or Array(_) for short).\n\nExamples\n\njulia> ev = complex.([7, 8, 9] , [7, 8, 9])\n3-element Vector{Int64}:\n 7 + 7im\n 8 + 8im\n 9 + 9im\n\n julia> dvim =  [1, 2, 3, 4]\n 4-element Vector{Int64}:\n  1\n  2\n  3\n  4\njulia> SkewHermTridiagonal(ev, dvim)\n4×4 SkewHermTridiagonal{Complex{Int64}, Vector{Complex{Int64}}, Vector{Int64}}:\n 0+1im -7+7im  0+0im  0+0im\n 7-7im  0+2im -8+8im  0+0im\n 0+0im -8+8im  0+3im -9+9im\n 0+0im  0+0im  9+9im  0+4im\n\n\n\n\n\nSkewHermTridiagonal(A::AbstractMatrix)\n\nConstruct a skewhermitian tridiagonal matrix from first subdiagonal and main diagonal of the skewhermitian matrix A.\n\nExamples\n\njulia> A = [1 2 3; 2 4 5; 3 5 6]\n3×3 Matrix{Int64}:\n 1  2  3\n 2  4  5\n 3  5  6\njulia> SkewHermTridiagonal(A)\n3×3 SkewHermTridiagonal{Int64, Vector{Int64}}:\n 0 -2  0\n 2  0 -5\n 0  5  0\n\n\n\n\n\n","category":"type"},{"location":"#SkewLinearAlgebra.skewchol","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.skewchol","text":"skewchol(A)\n\nComputes a Cholesky-like factorization of the real skew-symmetric matrix A. The function returns a SkewCholesky structure composed of three fields:  Rm,Jm,Pv. Rm is UpperTriangular, Jm is SkewHermTridiagonal,  Pv is an array of integers. Let S be the returned structure, then the factorization  is such that S.Rm'*S.Jm*S.Rm = A[S.Pv,S.Pv]\n\nThis factorization (and the underlying algorithm) is described in from P. Benner et al,  \"Cholesky-like factorizations of skew-symmetric matrices\"(2000). \n\n\n\n\n\n","category":"function"},{"location":"#SkewLinearAlgebra.pfaffian","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.pfaffian","text":"pfaffian(A)\n\nReturns the pfaffian of A where a is a real skew-Hermitian matrix. If A is not of type SkewHermitian{<:Real}, then isskewhermitian(A) is performed to ensure that A = -A'\n\n\n\n\n\n","category":"function"},{"location":"#SkewLinearAlgebra.logabspfaffian","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.logabspfaffian","text":"logabspfaffian(A)\n\nReturns a tuple with the log of the absolute value of the pfaffian of A as first output and the sign of the pfaffian as second output. A must be a real skew-Hermitian matrix. If A is not of type SkewHermitian{<:Real}, then isskewhermitian(A) is performed to ensure that A = -A'\n\n\n\n\n\n","category":"function"},{"location":"","page":"SkewLinearAlgebra.jl Documentation","title":"SkewLinearAlgebra.jl Documentation","text":"link to SkewHermitian","category":"page"}]
}
